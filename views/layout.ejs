<!DOCTYPE html>
<html>
<head>
<style media="screen">
html{
  font-family: consolas;
  background-color: #282a36;
  color: #50fa72;
}
a {
  color: white;
}

table {
  width: 100%;
  border-collapse: collapse;
}

table, th, td {
  border: 1px solid white;
}

th {
  cursor: pointer;
}

th, td {
  white-space: nowrap;
}

.container-flex-center {
  display: flex;
}

.container-th{
  justify-content: space-between;
  align-items: center;
}

.container-arrows{
  flex-direction: column;
  line-height: 11px;
  font-size: 14px;
  padding: 2px;
}

.container-flex-center {
  flex-direction: row;
  justify-content: center; /* flex-flow alignment */
  align-items: center; /* opposite of flex-flow alignment */
  justify-content: space-between; /* How the children are distributed (or spread out) */
}

.expand-shrink-button{
  float: right;
  padding: 0;
  width: 18px;
  height: 18px;
  font-size: 10px;
}

#title{
  text-align: center;
}
</style>
<script type="text/javascript">
  Date.prototype.toInputString = function(){
    return this.toISOString().slice(0, 22);
  }
</script>
<title><%=typeof title == 'undefined' ? 'New Sails App' : title%></title>

<!-- Viewport mobile tag for sensible mobile support -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


<!--
Stylesheets and Preprocessors
==============================

You can always bring in CSS files manually with `<link>` tags, or asynchronously
using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
of Sails' conventional asset pipeline (boilerplate Gruntfile).

By default, stylesheets from your `assets/styles` folder are included
here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
are supported. In production, your styles will be minified and concatenated into
a single file.

To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
For example, here are a few things you could do:

+ Change the order of your CSS files
+ Import stylesheets from other directories
+ Use a different or additional preprocessor, like SASS, SCSS or Stylus
-->

<!--STYLES-->
<link rel="stylesheet" href="/styles/importer.css">
<!--STYLES END-->
</head>

<body>
  <%- body %>



  <!--
  Client-side Templates
  ========================

  HTML templates are important prerequisites of modern, rich client applications.
  To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
  that you load these templates client-side.

  By default, your Gruntfile is configured to automatically load and precompile
  client-side JST templates in your `assets/templates` folder, then
  include them here automatically (between TEMPLATES and TEMPLATES END).

  To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

  + Import templates from other directories
  + Use a different template engine (handlebars, jade, dust, etc.)
  + Internationalize your client-side templates using a server-side
  stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->


<!--

Client-side Javascript
========================

You can always bring in JS files manually with `script` tags, or asynchronously
on the client using a solution like AMD (RequireJS).  Or, if you like, you can
take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

By default, files in your `assets/js` folder are included here
automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
CoffeeScript (.coffee) are supported. In production, your scripts will be minified
and concatenated into a single file.

To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
For example, here are a few things you could do:

+ Change the order of your scripts
+ Import scripts from other directories
+ Use a different preprocessor, like TypeScript

-->

<script src="/js/dependencies/sails.io.js"></script>
</body>
</html>
