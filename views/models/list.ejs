<h1 id="title"></h1>

<div class="actions">
  <a href="/"><- Back</a>
  <a id="add-new" style="float:right">Add new</a>
</div>

<table>
  <thead>
    <tr>
      <!-- Generated Code -->
    </tr>
  </thead>
  <tbody>

  </tbody>
</table>

<script type="text/javascript">
const model = '<%= req.params.model %>';
const theadTr = document.querySelector('table thead tr');
let attributes = sortAttributes(<%- JSON.stringify(sails.models[req.params.model].attributes) %>);

document.getElementById('title').innerHTML = `${model}`;
document.getElementById('add-new').href = `/models/${model}/create`;

const editTh = document.createElement('th');
editTh.innerHTML = 'Edit';
theadTr.appendChild(editTh);

// convert attributes to th
attributes.forEach(attr => {
  const keys = Object.keys(attr);
  const key = keys[0];
  const th = document.createElement('th');
  th.innerHTML = key;
  theadTr.appendChild(th);
});

const deleteTh = document.createElement('th');
deleteTh.innerHTML = 'Delete';
theadTr.appendChild(deleteTh);

// Display the data
fetch(`/${model}`).then(response => response.json().then(data => {
  data.forEach(item => {
    const deleteTd = document.createElement('td');
    const deleteLink = document.createElement('a');
    const editTd = document.createElement('td');
    const editLink = document.createElement('a');
    const tr = document.createElement('tr');

    editLink.innerHTML = 'Edit';
    editLink.href = `/models/${model}/${item.id}`;
    editTd.appendChild(editLink);

    deleteLink.innerHTML = 'Delete';
    deleteLink.href = `/models/${model}`;
    deleteLink.onclick = event => {
      event.preventDefault();
      const warningMessage = `Are you sure you want to delete this item?\n\n${JSON.stringify(item)}`;
      if(confirm(warningMessage)){
        fetch(`/${model}/${item.id}`, {
          'method': 'DELETE',
          'body': item
        }).then(response => {
          location.href = deleteLink.href;
        });
      }
    }
    deleteTd.appendChild(deleteLink);
    tr.appendChild(editTd);

    attributes.forEach(attr => {
      const keys = Object.keys(attr);
      const key = keys[0];
      const td = document.createElement('td');
      let name = getFriendlyName(item[key], attr[key]);

      td.innerHTML = name;
      tr.appendChild(td);
      document.querySelector('table tbody').appendChild(tr);
    });

    tr.appendChild(deleteTd);

  });
}));

/**
 * Converts the value given to a user friendly string
 * @param attributeValue the value to convert
 * @param attribute the attribute object itself, specifying its properties
 */
function getFriendlyName(attributeValue, attribute){
  if(!attributeValue) {
    return null;
  } else if (attribute.collection) {
    return `${attributeValue.length} ${attribute.collection}`;
  } else if(attribute.model){
    return attributeValue.name;
  } else if(['datetime'].indexOf(attribute.type) != -1) {

    const pad = number => {
      number = number.toString();
      return number.length == 1 ? `0${number}` : number;
    }
    const date = new Date(attributeValue);
    const month = pad(date.getMonth() + 1); // the +1 is because month is zero-based
    const day = pad(date.getDate());
    const year = date.getFullYear();
    const hour = pad(date.getHours());
    const minutes = pad(date.getMinutes());
    const seconds = pad(date.getSeconds().toString());


    return `${month}/${day}/${year} ${hour}:${minutes}:${seconds}`;

  } else {
    return attributeValue;
  }
}

/**
 * Sorts the attributes of the attributes object in a user friendly order
 * @param attrObject The attributes object to sort its keys
 * @return an array with the sorted keys
 */
function sortAttributes(attrObject){
  const firstItems = ['id', 'name'];
  const secondItems = ['createdAt', 'updatedAt'];
  let sortedAttributes = [];

  // Sort attributes in a user friendly order
  sortedAttributes = Object.keys(attrObject) // get array of keys
  .filter(item => firstItems.indexOf(item) == -1 && secondItems.indexOf(item) == -1) // take out filtered items
  .sort(); // sort

  sortedAttributes = firstItems.concat(sortedAttributes, secondItems); // prepend first items and append last items
  sortedAttributes = sortedAttributes.map(attr => {
    const thingToReturn = {};
    thingToReturn[attr] = attrObject[attr];
    return thingToReturn;
  });

  return sortedAttributes;
}
</script>
